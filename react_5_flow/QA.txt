Q1. 리액트를 사용하는 이유를 설명해보세요 (2가지 이상)
Q2. (Q1)을 통해 얻을 수 있는 장점은 무엇일까요?
    - 돔에 접근하지 않아도, 반복되는 함수 객체를(또는 로직) 순회를 통해 뿌려줄 수 있다 ex) map
    - 일반 변수와 다른 상태 변수를 사용해서 상태의 변화에 따라 랜더링을 다시 해줄 수 있다.
    - 또한 UI의 필요에 따라 원하는 부분만 랜더링을 할 수 있다.  
    - js를 그대로 html state에 갖다 쓸 수 있다. 
	ex) 모달이 보이지 않게 하기 위해 어떻게 할 수 있을까?
	    - js는 display = none을 줬을 것 
	    - react는 모달의 상태를 true, false 또는 다른 값으로 구분하여 바로 html에 갖다쓸 수 있다. 
    - html에 직접 속성명을 지정하고, 객체(함수)를 넘겨줄 수 있다. 위치가 달라도 연동(?)이 가능 
	-> 이때 props driling을 조심해야 한다. props가 계속해서 깊어지는 것을 말한다. 
	-> props는 언제 깊어지는가? a-> c 컴포넌트로 전달하는 데 b는 이를 알 필요가 없다.
	-> 그러나 a가 c에게 전달하기 위해서는 b를 거칠 수밖에 없다. 이를 props driling이라 한다. 
    -	재사용이 가능한 함수를 커스텀훅(쉽게 말해 모듈화)으로 만들어 줄 수 있다. 
    - 컴포넌트 단위를 사용하여 유지보수가 쉽다. 
	> 복잡한 파일 구조를 갖고 있는 이유도 컴포넌트 단위를 이용하기 때문이다. 
	> 그러나 이는 재사용이 가능하다는 장점으로 덮을(?) 수 있다.  
    

Q3. 리액트가 가상 돔을 사용하는 이유는 무엇일까요?
    - 가상 돔은 리액트가 갖고 있는 돔의 복사본이다. 이를 이용하면 랜더링 시간이 감소한다. 
	상태변수 state를 이용한다고 생각해보자. 이는 가짜 돔의 변경 상태를 진짜 돔에게 전달해준다. 
	결국, 계속해서 변경이 일어나는 건 가짜돔, 이를 감지해서 진짜 돔을 변경해주기 때문에 
	진짜 돔은 랜더링의 시간을 줄일 수 있는 것


Q4. 리액트가 가상 돔과 돔 트리를 비교하여 바뀐 부분이 있다면 화면을 다시 그리는 행위를 무엇이라 할까요?
    - Virtual Dom ? 


Q5. (Q3)의 행위를 통해 얻을 수 있는 이점은 무엇일까요?
    - 무거운 작업을 할 때 랜더링 횟수를 줄여서 시간을 감소시킨다. 


Q6. (Q3)은 리액트에서 어느 순간에 실현될까요?
    - 훅함수를 이용해서 상태 변화를 감지할 수 있게 만들어주었을 때
    - 훅함수의 종류에 따라 언제 상태 변화를 감지하고, 함수 내부를 실행시킬 지, 
	리랜더링 조건을 알 수 있다. 

Q7. 훅 함수는 왜 만들게 되었을까요?
    아래의 훅 함수는 각 언제 선언되어야 할까요?
    (1) useState
	  상태가 변경될 때마다 컴포넌트도 다시 랜더링 해줘야 할 때. (상태관리 함수)
    (2) useRef
	  (useRef.current)객체 내부의 값을 relender와 상관 없이 유지하고 싶을 때 선언한다. 
	   실제돔에 접근하기 위해서도 사용하지만 이는 지양한다.
    (3) useEffect
	  useEffect는 의존성 배열에 변화가 생기면 callback을 선언한다. 
	  state가 비동기로 동작하는데 state가 변하고 나서 생기는 효과를 갖고 있다. 
    (4) useCallback
	  첫번째 인자로 콜백함수가 들어가는데, 콜백함수 자체를 캐싱(memoization)하는 것이다. 
	   함수를 새로 생성하는 것이 아니라 필요할 때마다 가져와 줄 때 사용할 수 있다. 
	   만약 useCallback을 이용하지 않는다면 컴포넌트가 리랜더링 될 때마다 안의 callback 함수도	
	   랜더링이 될 것이고 랜더링 하지 않아도 되는 함수까지 랜더링을 하게 되어 유지 보수를 떨어트릴 것 
	   
    (5) useMemo
	  자주 쓰는 값을 캐싱하고 필요할 때마다 이 값을 메모리에서 꺼내와 재사용할 때 사용한다.  
	   즉 처음에 계산된 결과값을 저장하고 있고, 컴포넌트가 반복적으로 랜더링 되어도 
	   이미 계산된 결과값을 꺼내와 재사용을 가능하게 하고 싶을 때 사용.
	  이 또한 의존성 배열을 갖고 있고, 배열에 변화가 생긴다면 콜백함수를 다시 호출한다

Q8. 커스텀 훅을 제작하면서 얻을 수 있는 이점은 무엇이고 어느 때 만들어야 할까요?
    - 훅함수가 반복적으로 사용될 경우 이를 하나의 커스텀 훅으로 만들어준다.
    - 이 함수를 다른 곳에서도 반복적으로 사용해야 하는데, 이를 재사용이 가능하다고 하고
	재사용이 가능한 로직들을 모듈화 한 것이 커스텀 훅이다. 


Q9. 리액트로 프로젝트를 만들려고할 때 고려해야하는 사항들을 아는대로 작성해보세요 (3가지 이상)
    - 컴포넌트 구성(파일 구조) 
    - 상태 유지보수 (내가 지금 만드는 UI의 리랜더링을 조금 더 줄이고, hook을 이용할 부분이 없는가?)
    - 재사용될 가능성이 있는 로직이 없는가? 

Q10. 만약 위의 질문에 모두 답을 했다면, 현재 부족한 것은 리액트가 아닌 자바스크립트 일 수 있습니다
    이전 풀어보았던 자바스크립트 API 문제 1~4와 board 문제를 현재 풀이할 수 있는지 확인해보세요
    
    react로 풀이를 한다고 가정했을 때와 (직접 바꿔보지는 말 것, 예제 문제와 유사)
    vanilla js(java script)로 풀이한다고 하였때 와의 차이점은 무엇일까요?

    * 위 문제를 받지 못한 수강생은 메일 전송 시 따로 첨부하여 송부

    - 
    -
    

Q11. 리액트에서 컴포넌트를 나누는 기준은 어떻게 되어야할까요?
     또한, 이러한 관점은 개발자마다 다를 수 있는데 왜 그럴까요?

     - 재사용이 될 가능성이 있는 컴포넌트들을 분리해주기 위해, 
	 그리고 한 컴포넌트 내에서 로직이 복잡해지는 것을 막기 위해..?

     - 개발자마다 사용하는 컴포넌트가 다르고, 로직의 복잡도 보다 파일의 복잡도를
	  더 싫어하는 개발자도 존재하기 때문에 아마도 개발자마다 컴포넌트를 나누는
	  기준이 다르지 않을까 하고 생각한다. 
